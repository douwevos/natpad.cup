/* generated by natpad.cup Wed Mar 23 16:40:51 CET 2016 */
package net.natpad.cup.model.parser.generated;

import java.util.Hashtable;
import net.natpad.cup.FatalCupException;
import net.natpad.cup.export.java.Emit;
import net.natpad.cup.model.bnf.ActionPart;
import net.natpad.cup.model.bnf.BnfModel;
import net.natpad.cup.model.bnf.NonTerminal;
import net.natpad.cup.model.bnf.Production;
import net.natpad.cup.model.bnf.ProductionPart;
import net.natpad.cup.model.bnf.Symbol;
import net.natpad.cup.model.bnf.SymbolPart;
import net.natpad.cup.model.bnf.Terminal;
import net.natpad.cup.model.parser.NewLexer;
import net.natpad.cup.model.parser.ParserHelper;
import net.natpad.cup.model.parser.generated.runtime.LrParserContext;
import net.natpad.cup.model.parser.generated.runtime.LrSymbol;
import net.natpad.cup.state.Assoc;

public class Actions {




	ParserHelper parserHelper = new ParserHelper();

	public Parser parser;

	public Actions(Parser parser) {
		this.parser = parser;
	}



	Actions() {
	}

	/** Method with the actual generated action code. */
	public final LrSymbol runAction(LrParserContext cupContext, int cupActionId) throws Exception {
		/* Symbol object for return from actions */
		LrSymbol cupResult;

		/* select the action based on the action number */
		switch (cupActionId) {
			case 0: { // $START ::= spec EOF 
				Object RESULT = null;
				LrSymbol cupstart_val = cupContext.getFromTop(1);
				Object start_val = (Object) cupstart_val.value;
				RESULT = start_val;
				cupResult = new LrSymbol(0/*$START*/, RESULT);
			}
			/* ACCEPT */
			cupContext.doneParsing();
			return cupResult;

			case 1: { // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
				Object RESULT = null;
				// propagate RESULT from NT$0
				if ( cupContext.getFromTop(7).value != null ) {
					RESULT = cupContext.getFromTop(7).value;
				}

				cupResult = new LrSymbol(1/*spec*/, RESULT);
			}
			return cupResult;

			case 2: { // NT$0 ::= 
				Object RESULT = null;

				/* declare "error" as a terminal */
				parserHelper.symbols.put("error", new SymbolPart(parser.model.error));

				/* declare start non terminal */
				parserHelper.non_terms.put("$START", parser.model.START_nt);

				cupResult = new LrSymbol(43/*NT$0*/, RESULT);
			}
			return cupResult;

			case 3: { // spec ::= error symbol_list precedence_list start_spec production_list 
				Object RESULT = null;

				cupResult = new LrSymbol(1/*spec*/, RESULT);
			}
			return cupResult;

			case 4: { // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$1
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(2/*package_spec*/, RESULT);
			}
			return cupResult;

			case 5: { // NT$1 ::= 
				Object RESULT = null;

				/* save the package name */
				Emit.setPackageName(parserHelper.multipart_name);

				/* reset the accumulated multipart name */
				parserHelper.multipart_name = new String();

				cupResult = new LrSymbol(44/*NT$1*/, RESULT);
			}
			return cupResult;

			case 6: { // package_spec ::= empty 
				Object RESULT = null;

				cupResult = new LrSymbol(2/*package_spec*/, RESULT);
			}
			return cupResult;

			case 7: { // import_list ::= import_list import_spec 
				Object RESULT = null;

				cupResult = new LrSymbol(3/*import_list*/, RESULT);
			}
			return cupResult;

			case 8: { // import_list ::= empty 
				Object RESULT = null;

				cupResult = new LrSymbol(3/*import_list*/, RESULT);
			}
			return cupResult;

			case 9: { // import_spec ::= IMPORT import_id NT$2 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$2
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(14/*import_spec*/, RESULT);
			}
			return cupResult;

			case 10: { // NT$2 ::= 
				Object RESULT = null;

				/* save this import on the imports list */
				Emit.importListPush(parserHelper.multipart_name);

				/* reset the accumulated multipart name */
				parserHelper.multipart_name = new String();

				cupResult = new LrSymbol(45/*NT$2*/, RESULT);
			}
			return cupResult;

			case 11: { // code_part ::= action_code_part 
				Object RESULT = null;

				cupResult = new LrSymbol(6/*code_part*/, RESULT);
			}
			return cupResult;

			case 12: { // code_part ::= parser_code_part 
				Object RESULT = null;

				cupResult = new LrSymbol(6/*code_part*/, RESULT);
			}
			return cupResult;

			case 13: { // code_part ::= init_code 
				Object RESULT = null;

				cupResult = new LrSymbol(6/*code_part*/, RESULT);
			}
			return cupResult;

			case 14: { // code_part ::= scan_code 
				Object RESULT = null;

				cupResult = new LrSymbol(6/*code_part*/, RESULT);
			}
			return cupResult;

			case 15: { // code_parts ::= 
				Object RESULT = null;

				cupResult = new LrSymbol(5/*code_parts*/, RESULT);
			}
			return cupResult;

			case 17: { // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
				Object RESULT = null;
				LrSymbol cupuser_code = cupContext.getFromTop(1);
				String user_code = (String) cupuser_code.value;

				if (Emit.getActionCode() != null) {
				parser.lexer.emit_error("Redundant action code (skipping)");
				} else {
				/* save the user included code string */
				Emit.setActionCode(user_code);
				}

				cupResult = new LrSymbol(4/*action_code_part*/, RESULT);
			}
			return cupResult;

			case 16: { // code_parts ::= code_parts code_part 
				Object RESULT = null;

				cupResult = new LrSymbol(5/*code_parts*/, RESULT);
			}
			return cupResult;

			case 19: { // init_code ::= INIT WITH CODE_STRING opt_semi 
				Object RESULT = null;
				LrSymbol cupuser_code = cupContext.getFromTop(1);
				String user_code = (String) cupuser_code.value;

				if (Emit.getInitCode() != null) {
				parser.lexer.emit_error("Redundant init code (skipping)");
				} else {
				/* save the user code */
				Emit.setInitCode(user_code);
				}

				cupResult = new LrSymbol(16/*init_code*/, RESULT);
			}
			return cupResult;

			case 18: { // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
				Object RESULT = null;
				LrSymbol cupuser_code = cupContext.getFromTop(1);
				String user_code = (String) cupuser_code.value;

				if (Emit.getParserCode() != null) {
				parser.lexer.emit_error("Redundant parser code (skipping)");
				} else {
				/* save the user included code string */
				Emit.setParserCode(user_code);
				}

				cupResult = new LrSymbol(9/*parser_code_part*/, RESULT);
			}
			return cupResult;

			case 21: { // symbol_list ::= symbol_list symbol 
				Object RESULT = null;

				cupResult = new LrSymbol(10/*symbol_list*/, RESULT);
			}
			return cupResult;

			case 20: { // scan_code ::= SCAN WITH CODE_STRING opt_semi 
				Object RESULT = null;
				LrSymbol cupuser_code = cupContext.getFromTop(1);
				String user_code = (String) cupuser_code.value;

				if (Emit.getScanCode() != null) {
				parser.lexer.emit_error("Redundant scan code (skipping)");
				} else {
				/* save the user code */
				Emit.setScanCode(user_code);
				}

				cupResult = new LrSymbol(17/*scan_code*/, RESULT);
			}
			return cupResult;

			case 23: { // symbol ::= TERMINAL type_id declares_term 
				Object RESULT = null;

				cupResult = new LrSymbol(18/*symbol*/, RESULT);
			}
			return cupResult;

			case 22: { // symbol_list ::= symbol 
				Object RESULT = null;

				cupResult = new LrSymbol(10/*symbol_list*/, RESULT);
			}
			return cupResult;

			case 25: { // symbol ::= non_terminal type_id declares_non_term 
				Object RESULT = null;

				cupResult = new LrSymbol(18/*symbol*/, RESULT);
			}
			return cupResult;

			case 24: { // symbol ::= TERMINAL declares_term 
				Object RESULT = null;

				cupResult = new LrSymbol(18/*symbol*/, RESULT);
			}
			return cupResult;

			case 27: { // symbol ::= TERMINAL error NT$3 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$3
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(18/*symbol*/, RESULT);
			}
			return cupResult;

			case 26: { // symbol ::= non_terminal declares_non_term 
				Object RESULT = null;

				cupResult = new LrSymbol(18/*symbol*/, RESULT);
			}
			return cupResult;

			case 29: { // symbol ::= non_terminal error NT$4 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$4
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(18/*symbol*/, RESULT);
			}
			return cupResult;

			case 28: { // NT$3 ::= 
				Object RESULT = null;

				/* reset the accumulated multipart name */
				parserHelper.multipart_name = new String();

				cupResult = new LrSymbol(46/*NT$3*/, RESULT);
			}
			return cupResult;

			case 31: { // declares_term ::= term_name_list NT$5 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$5
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(34/*declares_term*/, RESULT);
			}
			return cupResult;

			case 30: { // NT$4 ::= 
				Object RESULT = null;

				/* reset the accumulated multipart name */
				parserHelper.multipart_name = new String();

				cupResult = new LrSymbol(47/*NT$4*/, RESULT);
			}
			return cupResult;

			case 34: { // NT$6 ::= 
				Object RESULT = null;

				/* reset the accumulated multipart name */
				parserHelper.multipart_name = new String();

				cupResult = new LrSymbol(49/*NT$6*/, RESULT);
			}
			return cupResult;

			case 35: { // term_name_list ::= term_name_list COMMA new_term_id 
				Object RESULT = null;

				cupResult = new LrSymbol(20/*term_name_list*/, RESULT);
			}
			return cupResult;

			case 32: { // NT$5 ::= 
				Object RESULT = null;

				/* reset the accumulated multipart name */
				parserHelper.multipart_name = new String();

				cupResult = new LrSymbol(48/*NT$5*/, RESULT);
			}
			return cupResult;

			case 33: { // declares_non_term ::= non_term_name_list NT$6 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$6
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(35/*declares_non_term*/, RESULT);
			}
			return cupResult;

			case 38: { // non_term_name_list ::= new_non_term_id 
				Object RESULT = null;

				cupResult = new LrSymbol(21/*non_term_name_list*/, RESULT);
			}
			return cupResult;

			case 39: { // precedence_list ::= precedence_l 
				Object RESULT = null;

				cupResult = new LrSymbol(30/*precedence_list*/, RESULT);
			}
			return cupResult;

			case 36: { // term_name_list ::= new_term_id 
				Object RESULT = null;

				cupResult = new LrSymbol(20/*term_name_list*/, RESULT);
			}
			return cupResult;

			case 37: { // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
				Object RESULT = null;

				cupResult = new LrSymbol(21/*non_term_name_list*/, RESULT);
			}
			return cupResult;

			case 42: { // precedence_l ::= preced 
				Object RESULT = null;

				cupResult = new LrSymbol(33/*precedence_l*/, RESULT);
			}
			return cupResult;

			case 43: { // preced ::= PRECEDENCE LEFT NT$7 terminal_list SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$7
				if ( cupContext.getFromTop(2).value != null ) {
					RESULT = cupContext.getFromTop(2).value;
				}

				cupResult = new LrSymbol(31/*preced*/, RESULT);
			}
			return cupResult;

			case 40: { // precedence_list ::= empty 
				Object RESULT = null;

				cupResult = new LrSymbol(30/*precedence_list*/, RESULT);
			}
			return cupResult;

			case 41: { // precedence_l ::= precedence_l preced 
				Object RESULT = null;

				cupResult = new LrSymbol(33/*precedence_l*/, RESULT);
			}
			return cupResult;

			case 46: { // NT$8 ::= 
				Object RESULT = null;

				parserHelper.update_precedence(Assoc.right);

				cupResult = new LrSymbol(51/*NT$8*/, RESULT);
			}
			return cupResult;

			case 47: { // preced ::= PRECEDENCE NONASSOC NT$9 terminal_list SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$9
				if ( cupContext.getFromTop(2).value != null ) {
					RESULT = cupContext.getFromTop(2).value;
				}

				cupResult = new LrSymbol(31/*preced*/, RESULT);
			}
			return cupResult;

			case 44: { // NT$7 ::= 
				Object RESULT = null;

				parserHelper.update_precedence(Assoc.left);

				cupResult = new LrSymbol(50/*NT$7*/, RESULT);
			}
			return cupResult;

			case 45: { // preced ::= PRECEDENCE RIGHT NT$8 terminal_list SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$8
				if ( cupContext.getFromTop(2).value != null ) {
					RESULT = cupContext.getFromTop(2).value;
				}

				cupResult = new LrSymbol(31/*preced*/, RESULT);
			}
			return cupResult;

			case 51: { // terminal_id ::= term_id 
				String RESULT = null;
				LrSymbol cupsym = cupContext.getFromTop(0);
				String sym = (String) cupsym.value;

				parserHelper.add_precedence(sym);
				RESULT = sym;

				cupResult = new LrSymbol(40/*terminal_id*/, RESULT);
			}
			return cupResult;

			case 50: { // terminal_list ::= terminal_id 
				Object RESULT = null;

				cupResult = new LrSymbol(32/*terminal_list*/, RESULT);
			}
			return cupResult;

			case 49: { // terminal_list ::= terminal_list COMMA terminal_id 
				Object RESULT = null;

				cupResult = new LrSymbol(32/*terminal_list*/, RESULT);
			}
			return cupResult;

			case 48: { // NT$9 ::= 
				Object RESULT = null;

				parserHelper.update_precedence(Assoc.nonassoc);

				cupResult = new LrSymbol(52/*NT$9*/, RESULT);
			}
			return cupResult;

			case 55: { // start_spec ::= empty 
				Object RESULT = null;

				cupResult = new LrSymbol(11/*start_spec*/, RESULT);
			}
			return cupResult;

			case 54: { // NT$10 ::= 
				Object RESULT = null;
				LrSymbol cupstart_name = cupContext.getFromTop(0);
				String start_name = (String) cupstart_name.value;

				/* verify that the name has been declared as a non terminal */
				NonTerminal nt = (NonTerminal) parserHelper.non_terms.get(start_name);
				if (nt == null) {
				parser.lexer.emit_error("Start non terminal \"" + start_name + "\" has not been declared");
				} else {
				/* remember the non-terminal for later */
				parserHelper.start_nt = nt;
				parser.model.createStartProduction(nt);
				parserHelper.new_rhs();
				}

				cupResult = new LrSymbol(53/*NT$10*/, RESULT);
			}
			return cupResult;

			case 53: { // start_spec ::= START WITH nt_id NT$10 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$10
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}
				LrSymbol cupstart_name = cupContext.getFromTop(2);
				String start_name = (String) cupstart_name.value;

				cupResult = new LrSymbol(11/*start_spec*/, RESULT);
			}
			return cupResult;

			case 52: { // term_id ::= symbol_id 
				String RESULT = null;
				LrSymbol cupsym = cupContext.getFromTop(0);
				String sym = (String) cupsym.value;

				/* check that the symbol_id is a terminal */
				if (parserHelper.symbols.get(sym) == null) {
				/* issue a message */
				parser.lexer.emit_error("Terminal \"" + sym + "\" has not been declared");
				}
				RESULT = sym;

				cupResult = new LrSymbol(41/*term_id*/, RESULT);
			}
			return cupResult;

			case 59: { // NT$11 ::= 
				Object RESULT = null;
				LrSymbol cuplhs_id = cupContext.getFromTop(0);
				String lhs_id = (String) cuplhs_id.value;

				/* lookup the lhs nt */
				parserHelper.lhs_nt = (NonTerminal) parserHelper.non_terms.get(lhs_id);

				/* if it wasn't declared, emit a message */
				if (parserHelper.lhs_nt == null) {
				if (parser.lexer.error_count == 0)
				parser.lexer.emit_error("LHS non terminal \"" + lhs_id + "\" has not been declared");
				}

				/* reset the rhs accumulation */
				parserHelper.new_rhs();

				cupResult = new LrSymbol(54/*NT$11*/, RESULT);
			}
			return cupResult;

			case 58: { // production ::= nt_id NT$11 COLON_COLON_EQUALS rhs_list SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$11
				if ( cupContext.getFromTop(3).value != null ) {
					RESULT = cupContext.getFromTop(3).value;
				}
				LrSymbol cuplhs_id = cupContext.getFromTop(4);
				String lhs_id = (String) cuplhs_id.value;

				cupResult = new LrSymbol(22/*production*/, RESULT);
			}
			return cupResult;

			case 57: { // production_list ::= production 
				Object RESULT = null;

				cupResult = new LrSymbol(12/*production_list*/, RESULT);
			}
			return cupResult;

			case 56: { // production_list ::= production_list production 
				Object RESULT = null;

				cupResult = new LrSymbol(12/*production_list*/, RESULT);
			}
			return cupResult;

			case 63: { // rhs_list ::= rhs 
				Object RESULT = null;

				cupResult = new LrSymbol(27/*rhs_list*/, RESULT);
			}
			return cupResult;

			case 62: { // rhs_list ::= rhs_list BAR rhs 
				Object RESULT = null;

				cupResult = new LrSymbol(27/*rhs_list*/, RESULT);
			}
			return cupResult;

			case 61: { // NT$12 ::= 
				Object RESULT = null;
				parser.lexer.emit_error("Syntax Error");
				cupResult = new LrSymbol(55/*NT$12*/, RESULT);
			}
			return cupResult;

			case 60: { // production ::= error NT$12 SEMI 
				Object RESULT = null;
				// propagate RESULT from NT$12
				if ( cupContext.getFromTop(1).value != null ) {
					RESULT = cupContext.getFromTop(1).value;
				}

				cupResult = new LrSymbol(22/*production*/, RESULT);
			}
			return cupResult;

			case 68: { // prod_part ::= symbol_id opt_label 
				Object RESULT = null;
				LrSymbol cupsymid = cupContext.getFromTop(1);
				String symid = (String) cupsymid.value;
				LrSymbol cuplabid = cupContext.getFromTop(0);
				String labid = (String) cuplabid.value;

				/* try to look up the id */
				ProductionPart symb = (ProductionPart) parserHelper.symbols.get(symid);

				/* if that fails, symbol is undeclared */
				if (symb == null) {
				if (parserHelper.addUndefinedSymbol(symid)) {
				parser.lexer.emit_error("Symbol \"" + symid + "\" has not been declared");
				}
				} else {
				/* add a labeled production part */
				parserHelper.add_rhs_part(parserHelper.add_lab(symb, labid));
				}

				cupResult = new LrSymbol(24/*prod_part*/, RESULT);
			}
			return cupResult;

			case 69: { // prod_part ::= CODE_STRING 
				Object RESULT = null;
				LrSymbol cupcode_str = cupContext.getFromTop(0);
				String code_str = (String) cupcode_str.value;

				/* add a new production part */
				parserHelper.add_rhs_part(new ActionPart(code_str));

				cupResult = new LrSymbol(24/*prod_part*/, RESULT);
			}
			return cupResult;

			case 70: { // opt_label ::= COLON label_id 
				String RESULT = null;
				LrSymbol cuplabid = cupContext.getFromTop(0);
				String labid = (String) cuplabid.value;
				RESULT = labid;
				cupResult = new LrSymbol(39/*opt_label*/, RESULT);
			}
			return cupResult;

			case 71: { // opt_label ::= empty 
				String RESULT = null;
				RESULT = null;
				cupResult = new LrSymbol(39/*opt_label*/, RESULT);
			}
			return cupResult;

			case 64: { // rhs ::= prod_part_list PERCENT_PREC term_id 
				Object RESULT = null;
				LrSymbol cupterm_name = cupContext.getFromTop(0);
				String term_name = (String) cupterm_name.value;

				Symbol sym = null;
				if (parserHelper.lhs_nt != null) {
				/* Find the precedence symbol */
				if (term_name == null) {
				System.err.println("No terminal for contextual precedence");
				sym = null;
				} else {
				sym = ((SymbolPart) parserHelper.symbols.get(term_name)).getSymbol();
				}
				/* build the production */
				Production p;
				if ((sym != null) && (sym instanceof Terminal)) {
				p = new Production(parser.model.getNextProductionIndex(), parserHelper.lhs_nt, parserHelper.rhs_parts, parserHelper.rhs_pos, ((Terminal) sym).precedenceNum(),
				((Terminal) sym).precedenceSide());
				parser.model.add(p);

				((SymbolPart) parserHelper.symbols.get(term_name)).getSymbol().note_use();
				} else {
				System.err.println("Invalid terminal " + term_name + " for contextual precedence assignment");
				p = new Production(parser.model.getNextProductionIndex(), parserHelper.lhs_nt, parserHelper.rhs_parts, parserHelper.rhs_pos);
				parser.model.add(p);
				}

				/*
				* if we have no start non-terminal declared and this is the
				* first production, make its lhs nt the start_nt and build
				* a special start production for it.
				*/
				if (parserHelper.start_nt == null) {
				parserHelper.start_nt = parserHelper.lhs_nt;

				Production startProduction = parser.model.createStartProduction(parserHelper.lhs_nt);
				if ((sym != null) && (sym instanceof Terminal)) {
				startProduction.set_precedence_num(((Terminal) sym).precedenceNum());
				startProduction.set_precedence_side(((Terminal) sym).precedenceSide());
				}
				parserHelper.new_rhs();
				}
				}

				/* reset the rhs accumulation in any case */
				parserHelper.new_rhs();

				cupResult = new LrSymbol(28/*rhs*/, RESULT);
			}
			return cupResult;

			case 65: { // rhs ::= prod_part_list 
				Object RESULT = null;

				if (parserHelper.lhs_nt != null) {
				/* build the production */
				Production p = new Production(parser.model.getNextProductionIndex(), parserHelper.lhs_nt, parserHelper.rhs_parts, parserHelper.rhs_pos);
				parser.model.add(p);

				/*
				* if we have no start non-terminal declared and this is the
				* first production, make its lhs nt the start_nt and build
				* a special start production for it.
				*/
				if (parserHelper.start_nt == null) {
				parserHelper.start_nt = parserHelper.lhs_nt;

				/* build a special start production */
				parser.model.createStartProduction(parserHelper.lhs_nt);

				}
				}

				/* reset the rhs accumulation in any case */
				parserHelper.new_rhs();

				cupResult = new LrSymbol(28/*rhs*/, RESULT);
			}
			return cupResult;

			case 66: { // prod_part_list ::= prod_part_list prod_part 
				Object RESULT = null;

				cupResult = new LrSymbol(23/*prod_part_list*/, RESULT);
			}
			return cupResult;

			case 67: { // prod_part_list ::= empty 
				Object RESULT = null;

				cupResult = new LrSymbol(23/*prod_part_list*/, RESULT);
			}
			return cupResult;

			case 76: { // type_id ::= multipart_id 
				Object RESULT = null;

				cupResult = new LrSymbol(19/*type_id*/, RESULT);
			}
			return cupResult;

			case 77: { // type_id ::= type_id LBRACK RBRACK 
				Object RESULT = null;
				parserHelper.multipart_name = parserHelper.multipart_name.concat("[]");
				cupResult = new LrSymbol(19/*type_id*/, RESULT);
			}
			return cupResult;

			case 78: { // new_term_id ::= ID 
				Object RESULT = null;
				LrSymbol cupterm_id = cupContext.getFromTop(0);
				String term_id = (String) cupterm_id.value;

				/* see if this terminal has been declared before */
				if (parserHelper.symbols.get(term_id) != null) {
				/* issue a message */
				parser.lexer.emit_error("Symbol \"" + term_id + "\" has already been declared");
				} else {
				/* if no type declared, declare one */
				if (parserHelper.multipart_name.equals("")) {
				parserHelper.append_multipart("Object");
				}
				/* build a production_part and put it in the table */
				Terminal newTerm = new Terminal(parser.model.getNextTerminalIndex(), term_id, parserHelper.multipart_name);
				parser.model.terminals.add(newTerm);
				parserHelper.symbols.put(term_id, new SymbolPart(newTerm));
				}

				cupResult = new LrSymbol(25/*new_term_id*/, RESULT);
			}
			return cupResult;

			case 79: { // new_non_term_id ::= ID 
				Object RESULT = null;
				LrSymbol cupnon_term_id = cupContext.getFromTop(0);
				String non_term_id = (String) cupnon_term_id.value;

				/* see if this non terminal has been declared before */
				if (parserHelper.symbols.get(non_term_id) != null) {
				/* issue a message */
				parser.lexer.emit_error("Symbol \"" + non_term_id + "\" has already been declared");
				} else {
				if (parserHelper.multipart_name.equals("")) {
				parserHelper.append_multipart("Object");
				}
				/* build the non terminal object */
				NonTerminal this_nt = new NonTerminal(parser.model.getNextNonTerminalIndex(), non_term_id, parserHelper.multipart_name);
				parser.model.nonTerminals.add(this_nt);

				/* put it in the non_terms table */
				parserHelper.non_terms.put(non_term_id, this_nt);

				/* build a production_part and put it in the symbols table */
				parserHelper.symbols.put(non_term_id, new SymbolPart(this_nt));
				}

				cupResult = new LrSymbol(26/*new_non_term_id*/, RESULT);
			}
			return cupResult;

			case 72: { // multipart_id ::= multipart_id DOT robust_id 
				Object RESULT = null;
				LrSymbol cupanother_id = cupContext.getFromTop(0);
				String another_id = (String) cupanother_id.value;
				parserHelper.append_multipart(another_id);
				cupResult = new LrSymbol(13/*multipart_id*/, RESULT);
			}
			return cupResult;

			case 73: { // multipart_id ::= robust_id 
				Object RESULT = null;
				LrSymbol cupan_id = cupContext.getFromTop(0);
				String an_id = (String) cupan_id.value;
				parserHelper.append_multipart(an_id);
				cupResult = new LrSymbol(13/*multipart_id*/, RESULT);
			}
			return cupResult;

			case 74: { // import_id ::= multipart_id DOT STAR 
				Object RESULT = null;
				parserHelper.append_multipart("*");
				cupResult = new LrSymbol(15/*import_id*/, RESULT);
			}
			return cupResult;

			case 75: { // import_id ::= multipart_id 
				Object RESULT = null;

				cupResult = new LrSymbol(15/*import_id*/, RESULT);
			}
			return cupResult;

			case 85: { // robust_id ::= ID 
				String RESULT = null;
				LrSymbol cupthe_id = cupContext.getFromTop(0);
				String the_id = (String) cupthe_id.value;
				RESULT = the_id;
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 84: { // label_id ::= robust_id 
				String RESULT = null;
				LrSymbol cupthe_id = cupContext.getFromTop(0);
				String the_id = (String) cupthe_id.value;
				RESULT = the_id;
				cupResult = new LrSymbol(38/*label_id*/, RESULT);
			}
			return cupResult;

			case 87: { // robust_id ::= ACTION 
				String RESULT = null;
				RESULT = "action";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 86: { // robust_id ::= CODE 
				String RESULT = null;
				RESULT = "code";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 81: { // nt_id ::= error 
				String RESULT = null;

				parser.lexer.emit_error("Illegal use of reserved word");
				RESULT="ILLEGAL";

				cupResult = new LrSymbol(36/*nt_id*/, RESULT);
			}
			return cupResult;

			case 80: { // nt_id ::= ID 
				String RESULT = null;
				LrSymbol cupthe_id = cupContext.getFromTop(0);
				String the_id = (String) cupthe_id.value;
				RESULT = the_id;
				cupResult = new LrSymbol(36/*nt_id*/, RESULT);
			}
			return cupResult;

			case 83: { // symbol_id ::= error 
				String RESULT = null;

				parser.lexer.emit_error("Illegal use of reserved word");
				RESULT="ILLEGAL";

				cupResult = new LrSymbol(37/*symbol_id*/, RESULT);
			}
			return cupResult;

			case 82: { // symbol_id ::= ID 
				String RESULT = null;
				LrSymbol cupthe_id = cupContext.getFromTop(0);
				String the_id = (String) cupthe_id.value;
				RESULT = the_id;
				cupResult = new LrSymbol(37/*symbol_id*/, RESULT);
			}
			return cupResult;

			case 93: { // robust_id ::= SCAN 
				String RESULT = null;
				RESULT = "scan";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 92: { // robust_id ::= INIT 
				String RESULT = null;
				RESULT = "init";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 95: { // robust_id ::= START 
				String RESULT = null;
				RESULT = "start";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 94: { // robust_id ::= WITH 
				String RESULT = null;
				RESULT = "with";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 89: { // robust_id ::= TERMINAL 
				String RESULT = null;
				RESULT = "terminal";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 88: { // robust_id ::= PARSER 
				String RESULT = null;
				RESULT = "parser";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 91: { // robust_id ::= NONTERMINAL 
				String RESULT = null;
				RESULT = "nonterminal";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 90: { // robust_id ::= NON 
				String RESULT = null;
				RESULT = "non";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 102: { // non_terminal ::= NONTERMINAL 
				Object RESULT = null;

				cupResult = new LrSymbol(8/*non_terminal*/, RESULT);
			}
			return cupResult;

			case 103: { // opt_semi ::= 
				Object RESULT = null;

				cupResult = new LrSymbol(7/*opt_semi*/, RESULT);
			}
			return cupResult;

			case 100: { // robust_id ::= error 
				String RESULT = null;

				parser.lexer.emit_error("Illegal use of reserved word");
				RESULT="ILLEGAL";

				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 101: { // non_terminal ::= NON TERMINAL 
				Object RESULT = null;

				cupResult = new LrSymbol(8/*non_terminal*/, RESULT);
			}
			return cupResult;

			case 98: { // robust_id ::= RIGHT 
				String RESULT = null;
				RESULT = "right";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 99: { // robust_id ::= NONASSOC 
				String RESULT = null;
				RESULT = "nonassoc";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 96: { // robust_id ::= PRECEDENCE 
				String RESULT = null;
				RESULT = "precedence";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 97: { // robust_id ::= LEFT 
				String RESULT = null;
				RESULT = "left";
				cupResult = new LrSymbol(42/*robust_id*/, RESULT);
			}
			return cupResult;

			case 104: { // opt_semi ::= SEMI 
				Object RESULT = null;

				cupResult = new LrSymbol(7/*opt_semi*/, RESULT);
			}
			return cupResult;

			case 105: { // empty ::= 
				Object RESULT = null;

				cupResult = new LrSymbol(29/*empty*/, RESULT);
			}
			return cupResult;

			default:
				throw new Exception("Invalid action number found in internal parse table");
			}
		}

}
